λda_demo{
    // Data Analyzer Demonstration Application in Anarchy Inference
    // This application analyzes datasets, generates statistics, and visualizes results
    
    ƒmain(){
        // Configuration
        σdataFile = "data/sample_data.csv";
        σoutputDir = "output";
        
        ⌽("Anarchy Inference Data Analyzer Demo");
        ⌽("Analyzing data from: " + dataFile);
        
        ÷{
            // Create output directory if it doesn't exist
            ι(!?(outputDir)){
                ⌽("Creating output directory: " + outputDir);
                !("mkdir -p " + outputDir);
            }
            
            // Load data from CSV file
            ⌽("Loading data...");
            σcontent = 📖(dataFile);
            
            // Parse CSV data
            ξlines = content.split("\n");
            ξheader = lines[0].split(",");
            ξdata = ∅;
            
            // Process each line
            ∀(lines.slice(1), φ(line){
                ι(line.trim().length > 0){
                    ξfields = line.split(",");
                    ξrow = ∅;
                    
                    ∀(header, φ(col, i){
                        row[col] = fields[i];
                    });
                    
                    ＋(data, row);
                }
            });
            
            ⌽("Loaded " + 🔤(data.length) + " records with " + 🔤(header.length) + " columns");
            
            // Identify numeric columns
            ξnumericColumns = ∅;
            ξcategoricalColumns = ∅;
            
            ∀(header, φ(column){
                ι(column === "id" || column === "value"){
                    ＋(numericColumns, column);
                }ε{
                    ＋(categoricalColumns, column);
                }
            });
            
            ⌽("\nNumeric columns: " + numericColumns.join(", "));
            ⌽("Categorical columns: " + categoricalColumns.join(", "));
            
            // Generate statistics for numeric columns
            ξnumericStats = ∅;
            
            ∀(numericColumns, φ(column){
                ξvalues = data.map(φ(row){ ⟼(🔢(row[column])); });
                ξsum = ∑(values);
                ξavg = sum / values.length;
                
                // Calculate min and max
                ξsorted = values.sort(φ(a, b){ ⟼(a - b); });
                ξmin = sorted[0];
                ξmax = sorted[sorted.length - 1];
                
                // Calculate median
                ξmedian = 0;
                ι(sorted.length % 2 === 0){
                    ιmidIdx = sorted.length / 2;
                    median = (sorted[midIdx - 1] + sorted[midIdx]) / 2;
                }ε{
                    ιmidIdx = Math.floor(sorted.length / 2);
                    median = sorted[midIdx];
                }
                
                // Calculate standard deviation
                ξsumSquaredDiff = 0;
                ∀(values, φ(val){
                    ιdiff = val - avg;
                    sumSquaredDiff += diff * diff;
                });
                ξstdDev = Math.sqrt(sumSquaredDiff / values.length);
                
                numericStats[column] = {
                    "count": values.length,
                    "sum": sum,
                    "min": min,
                    "max": max,
                    "avg": avg,
                    "median": median,
                    "stdDev": stdDev
                };
            });
            
            // Generate statistics for categorical columns
            ξcategoricalStats = ∅;
            
            ∀(categoricalColumns, φ(column){
                ξfrequency = ∅;
                
                ∀(data, φ(row){
                    σvalue = row[column];
                    ι(!frequency[value]){
                        frequency[value] = 0;
                    }
                    frequency[value]++;
                });
                
                categoricalStats[column] = {
                    "uniqueValues": Object.keys(frequency).length,
                    "frequency": frequency
                };
            });
            
            // Display numeric statistics
            ⌽("\nNumeric Statistics:");
            ∀(Object.keys(numericStats), φ(column){
                ξstats = numericStats[column];
                ⌽("\n  Column: " + column);
                ⌽("    Count: " + 🔤(stats.count));
                ⌽("    Sum: " + 🔤(stats.sum));
                ⌽("    Min: " + 🔤(stats.min));
                ⌽("    Max: " + 🔤(stats.max));
                ⌽("    Average: " + 🔤(stats.avg.toFixed(2)));
                ⌽("    Median: " + 🔤(stats.median.toFixed(2)));
                ⌽("    Std Dev: " + 🔤(stats.stdDev.toFixed(2)));
            });
            
            // Display categorical statistics
            ⌽("\nCategorical Statistics:");
            ∀(Object.keys(categoricalStats), φ(column){
                ξstats = categoricalStats[column];
                ⌽("\n  Column: " + column);
                ⌽("    Unique Values: " + 🔤(stats.uniqueValues));
                ⌽("    Frequency Distribution:");
                
                ∀(Object.keys(stats.frequency), φ(value){
                    ιcount = stats.frequency[value];
                    ιpercentage = (count / data.length * 100).toFixed(1);
                    ⌽("      " + value + ": " + 🔤(count) + " (" + percentage + "%)");
                });
            });
            
            // Generate correlation matrix for numeric columns
            ι(numericColumns.length > 1){
                ⌽("\nCorrelation Matrix:");
                
                ξcorrelationMatrix = ∅;
                
                ∀(numericColumns, φ(col1){
                    correlationMatrix[col1] = ∅;
                    
                    ∀(numericColumns, φ(col2){
                        ι(col1 === col2){
                            correlationMatrix[col1][col2] = 1.0;
                        }ε{
                            ξvalues1 = data.map(φ(row){ ⟼(🔢(row[col1])); });
                            ξvalues2 = data.map(φ(row){ ⟼(🔢(row[col2])); });
                            
                            correlationMatrix[col1][col2] = calculateCorrelation(values1, values2);
                        }
                    });
                });
                
                // Display correlation matrix
                ⌽("    " + numericColumns.join("\t"));
                ∀(numericColumns, φ(col1){
                    σrow = col1;
                    ∀(numericColumns, φ(col2){
                        row += "\t" + correlationMatrix[col1][col2].toFixed(2);
                    });
                    ⌽("    " + row);
                });
            }
            
            // Save results to JSON file
            ξresults = {
                "dataFile": dataFile,
                "recordCount": data.length,
                "columns": header,
                "numericStats": numericStats,
                "categoricalStats": categoricalStats
            };
            
            σjsonResults = ⎋.stringify(results, null, 2);
            ✍(outputDir + "/analysis_results.json", jsonResults);
            ⌽("\nResults saved to " + outputDir + "/analysis_results.json");
            
            // Generate summary report
            σreport = "# Data Analysis Report\n\n";
            report += "## Dataset Overview\n\n";
            report += "- **File**: " + dataFile + "\n";
            report += "- **Records**: " + 🔤(data.length) + "\n";
            report += "- **Columns**: " + header.join(", ") + "\n\n";
            
            report += "## Numeric Statistics\n\n";
            ∀(Object.keys(numericStats), φ(column){
                ξstats = numericStats[column];
                report += "### " + column + "\n\n";
                report += "- Count: " + 🔤(stats.count) + "\n";
                report += "- Sum: " + 🔤(stats.sum) + "\n";
                report += "- Min: " + 🔤(stats.min) + "\n";
                report += "- Max: " + 🔤(stats.max) + "\n";
                report += "- Average: " + 🔤(stats.avg.toFixed(2)) + "\n";
                report += "- Median: " + 🔤(stats.median.toFixed(2)) + "\n";
                report += "- Std Dev: " + 🔤(stats.stdDev.toFixed(2)) + "\n\n";
            });
            
            report += "## Categorical Statistics\n\n";
            ∀(Object.keys(categoricalStats), φ(column){
                ξstats = categoricalStats[column];
                report += "### " + column + "\n\n";
                report += "- Unique Values: " + 🔤(stats.uniqueValues) + "\n";
                report += "- Frequency Distribution:\n\n";
                
                ∀(Object.keys(stats.frequency), φ(value){
                    ιcount = stats.frequency[value];
                    ιpercentage = (count / data.length * 100).toFixed(1);
                    report += "  - " + value + ": " + 🔤(count) + " (" + percentage + "%)\n";
                });
                report += "\n";
            });
            
            ✍(outputDir + "/analysis_report.md", report);
            ⌽("Report saved to " + outputDir + "/analysis_report.md");
            
            ⟼(⊤);
        }{
            ⌽("Error in data analyzer: " + ⚠.message);
            ⟼(⊥);
        }
    }
    
    // Helper function to calculate correlation between two arrays
    ƒcalculateCorrelation(ξarray1, ξarray2){
        ι(array1.length !== array2.length){
            ⟼(0);
        }
        
        ιn = array1.length;
        ιsum1 = ∑(array1);
        ιsum2 = ∑(array2);
        ιmean1 = sum1 / n;
        ιmean2 = sum2 / n;
        
        ιsum1Sq = ∑(array1.map(φ(val){ ⟼(val * val); }));
        ιsum2Sq = ∑(array2.map(φ(val){ ⟼(val * val); }));
        
        ιpSum = 0;
        ∀(array1, φ(val, i){
            pSum += val * array2[i];
        });
        
        ιnum = pSum - (sum1 * sum2 / n);
        ιden = Math.sqrt((sum1Sq - sum1 * sum1 / n) * (sum2Sq - sum2 * sum2 / n));
        
        ι(den === 0){
            ⟼(0);
        }
        
        ⟼(num / den);
    }
}
