Œªfile_demo{
    // File System Utility Demonstration in Anarchy Inference
    // This application implements a file system utility with backup and synchronization features
    
    ∆ímain(){
        // Configuration
        œÉsourceDir = "source";
        œÉbackupDir = "backup";
        œÉsyncDir = "sync";
        ŒπbackupInterval = 3600;  // seconds (1 hour)
        
        ‚åΩ("Anarchy Inference File System Utility Demo");
        
        √∑{
            // Create directories if they don't exist
            ‚àÄ([sourceDir, backupDir, syncDir], œÜ(dir){
                Œπ(!?(dir)){
                    ‚åΩ("Creating directory: " + dir);
                    !("mkdir -p " + dir);
                }
            });
            
            // Create sample files if source directory is empty
            ŒæsourceFiles = !("ls -1 " + sourceDir + " 2>/dev/null | wc -l");
            Œπ(sourceFiles.c === 0 && üî¢(sourceFiles.o.trim()) === 0){
                ‚åΩ("Source directory is empty. Creating sample files...");
                createSampleFiles(sourceDir);
            }
            
            // Display initial file status
            ‚åΩ("\nInitial File Status:");
            displayDirectoryStatus(sourceDir, "Source");
            displayDirectoryStatus(backupDir, "Backup");
            displayDirectoryStatus(syncDir, "Sync");
            
            // Perform initial backup
            ‚åΩ("\nPerforming initial backup...");
            ŒæbackupResult = backupDirectory(sourceDir, backupDir);
            ‚åΩ("Backup completed: " + üî§(backupResult.filesCopied) + " files copied, " + 
               üî§(backupResult.filesSkipped) + " files skipped");
            
            // Perform initial sync
            ‚åΩ("\nPerforming initial sync...");
            ŒæsyncResult = syncDirectories(sourceDir, syncDir);
            ‚åΩ("Sync completed: " + üî§(syncResult.added) + " files added, " + 
               üî§(syncResult.updated) + " files updated, " + 
               üî§(syncResult.deleted) + " files deleted");
            
            // Demonstrate file monitoring
            ‚åΩ("\nStarting file monitoring (press Ctrl+C to stop)...");
            ŒπmonitoringActive = ‚ä§;
            ŒπlastBackupTime = Date.now();
            
            // Simulate file changes
            ‚åΩ("\nSimulating file changes...");
            
            // 1. Create a new file
            ‚åΩ("Creating a new file...");
            ‚úç(sourceDir + "/new_file.txt", "This is a new file created during monitoring.");
            
            // 2. Modify an existing file
            ‚åΩ("Modifying an existing file...");
            Œæfiles = !("ls -1 " + sourceDir + " | grep -v new_file.txt | head -1");
            Œπ(files.c === 0 && files.o.trim() !== ""){
                œÉfileToModify = sourceDir + "/" + files.o.trim();
                œÉoriginalContent = üìñ(fileToModify);
                ‚úç(fileToModify, originalContent + "\nThis line was added during monitoring.");
            }
            
            // 3. Delete a file
            ‚åΩ("Deleting a file...");
            Œæfiles = !("ls -1 " + sourceDir + " | grep -v new_file.txt | tail -1");
            Œπ(files.c === 0 && files.o.trim() !== ""){
                œÉfileToDelete = sourceDir + "/" + files.o.trim();
                ‚úÇ(fileToDelete);
            }
            
            // Process file changes
            ‚åΩ("\nProcessing file changes...");
            
            // Check if backup is needed
            ŒπcurrentTime = Date.now();
            Œπ(currentTime - lastBackupTime >= backupInterval * 1000){
                ‚åΩ("Performing scheduled backup...");
                backupResult = backupDirectory(sourceDir, backupDir);
                ‚åΩ("Backup completed: " + üî§(backupResult.filesCopied) + " files copied, " + 
                   üî§(backupResult.filesSkipped) + " files skipped");
                lastBackupTime = currentTime;
            }Œµ{
                ‚åΩ("Skipping scheduled backup (not due yet)");
            }
            
            // Perform sync after changes
            ‚åΩ("\nSynchronizing after changes...");
            syncResult = syncDirectories(sourceDir, syncDir);
            ‚åΩ("Sync completed: " + üî§(syncResult.added) + " files added, " + 
               üî§(syncResult.updated) + " files updated, " + 
               üî§(syncResult.deleted) + " files deleted");
            
            // Display final file status
            ‚åΩ("\nFinal File Status:");
            displayDirectoryStatus(sourceDir, "Source");
            displayDirectoryStatus(backupDir, "Backup");
            displayDirectoryStatus(syncDir, "Sync");
            
            // Generate report
            ‚åΩ("\nGenerating file system report...");
            generateReport(sourceDir, backupDir, syncDir);
            
            ‚üº(‚ä§);
        }{
            ‚åΩ("Error in file system utility: " + ‚ö†.message);
            ‚üº(‚ä•);
        }
    }
    
    // Create sample files in the specified directory
    ∆ícreateSampleFiles(œÉdir){
        // Create text files
        ‚úç(dir + "/document1.txt", "This is the first sample document.\nIt contains multiple lines of text.\nUse this for testing file operations.");
        ‚úç(dir + "/document2.txt", "This is the second sample document.\nIt has different content from the first one.");
        ‚úç(dir + "/notes.txt", "Important notes:\n- Remember to backup files\n- Test synchronization\n- Verify file integrity");
        
        // Create a JSON file
        ŒæjsonData = {
            "name": "Sample Config",
            "version": "1.0",
            "settings": {
                "autoBackup": true,
                "syncInterval": 3600,
                "maxBackups": 5
            }
        };
        ‚úç(dir + "/config.json", ‚éã.stringify(jsonData, null, 2));
        
        // Create a log file
        œÉlogContent = "2025-04-25 08:00:00 INFO: System started\n";
        logContent += "2025-04-25 08:01:15 INFO: Configuration loaded\n";
        logContent += "2025-04-25 08:02:30 WARNING: Disk space low\n";
        logContent += "2025-04-25 08:03:45 INFO: Backup completed\n";
        ‚úç(dir + "/system.log", logContent);
        
        ‚åΩ("Created 5 sample files in " + dir);
    }
    
    // Display status of files in a directory
    ∆ídisplayDirectoryStatus(œÉdir, œÉlabel){
        ‚åΩ(label + " Directory (" + dir + "):");
        
        ŒælsResult = !("ls -la " + dir);
        Œπ(lsResult.c === 0){
            ‚åΩ(lsResult.o);
        }Œµ{
            ‚åΩ("  Error listing directory: " + lsResult.e);
        }
    }
    
    // Backup a directory to another location
    ∆íbackupDirectory(œÉsourceDir, œÉbackupDir){
        ŒπfilesCopied = 0;
        ŒπfilesSkipped = 0;
        
        // Get list of files in source directory
        ŒælsResult = !("ls -1 " + sourceDir);
        Œπ(lsResult.c !== 0){
            ‚üº({ "filesCopied": 0, "filesSkipped": 0 });
        }
        
        Œæfiles = lsResult.o.trim().split("\n");
        Œπ(files.length === 1 && files[0] === ""){
            files = [];
        }
        
        // Process each file
        ‚àÄ(files, œÜ(file){
            œÉsourcePath = sourceDir + "/" + file;
            œÉbackupPath = backupDir + "/" + file;
            
            // Check if file exists in backup and is newer
            ŒπbackupNeeded = ‚ä§;
            Œπ(?(backupPath)){
                ŒæsourceInfo = !("stat -c %Y " + sourcePath);
                ŒæbackupInfo = !("stat -c %Y " + backupPath);
                
                Œπ(sourceInfo.c === 0 && backupInfo.c === 0){
                    ŒπsourceTime = üî¢(sourceInfo.o.trim());
                    ŒπbackupTime = üî¢(backupInfo.o.trim());
                    
                    Œπ(sourceTime <= backupTime){
                        backupNeeded = ‚ä•;
                    }
                }
            }
            
            Œπ(backupNeeded){
                // Copy file to backup
                ŒæcopyResult = ‚ßâ(sourcePath, backupPath);
                Œπ(copyResult){
                    filesCopied++;
                }
            }Œµ{
                filesSkipped++;
            }
        });
        
        ‚üº({ "filesCopied": filesCopied, "filesSkipped": filesSkipped });
    }
    
    // Synchronize two directories (two-way sync)
    ∆ísyncDirectories(œÉsourceDir, œÉsyncDir){
        Œπadded = 0;
        Œπupdated = 0;
        Œπdeleted = 0;
        
        // Get list of files in source directory
        ŒæsourceLsResult = !("ls -1 " + sourceDir);
        ŒæsourceFiles = sourceLsResult.c === 0 ? sourceLsResult.o.trim().split("\n") : [];
        Œπ(sourceFiles.length === 1 && sourceFiles[0] === ""){
            sourceFiles = [];
        }
        
        // Get list of files in sync directory
        ŒæsyncLsResult = !("ls -1 " + syncDir);
        ŒæsyncFiles = syncLsResult.c === 0 ? syncLsResult.o.trim().split("\n") : [];
        Œπ(syncFiles.length === 1 && syncFiles[0] === ""){
            syncFiles = [];
        }
        
        // Add or update files from source to sync
        ‚àÄ(sourceFiles, œÜ(file){
            œÉsourcePath = sourceDir + "/" + file;
            œÉsyncPath = syncDir + "/" + file;
            
            Œπ(!?(syncPath)){
                // File doesn't exist in sync, copy it
                ŒæcopyResult = ‚ßâ(sourcePath, syncPath);
                Œπ(copyResult){
                    added++;
                }
            }Œµ{
                // File exists, check if source is newer
                ŒæsourceInfo = !("stat -c %Y " + sourcePath);
                ŒæsyncInfo = !("stat -c %Y " + syncPath);
                
                Œπ(sourceInfo.c === 0 && syncInfo.c === 0){
                    ŒπsourceTime = üî¢(sourceInfo.o.trim());
                    ŒπsyncTime = üî¢(syncInfo.o.trim());
                    
                    Œπ(sourceTime > syncTime){
                        // Source is newer, update sync
                        ŒæcopyResult = ‚ßâ(sourcePath, syncPath);
                        Œπ(copyResult){
                            updated++;
                        }
                    }
                }
            }
        });
        
        // Remove files from sync that don't exist in source
        ‚àÄ(syncFiles, œÜ(file){
            œÉsourcePath = sourceDir + "/" + file;
            œÉsyncPath = syncDir + "/" + file;
            
            Œπ(!?(sourcePath)){
                // File doesn't exist in source, delete from sync
                ŒædeleteResult = ‚úÇ(syncPath);
                Œπ(deleteResult){
                    deleted++;
                }
            }
        });
        
        ‚üº({ "added": added, "updated": updated, "deleted": deleted });
    }
    
    // Generate a report of the file system status
    ∆ígenerateReport(œÉsourceDir, œÉbackupDir, œÉsyncDir){
        œÉreport = "# File System Utility Report\n\n";
        report += "Generated: " + new Date().toISOString() + "\n\n";
        
        // Source directory report
        report += "## Source Directory (" + sourceDir + ")\n\n";
        ŒæsourceLsResult = !("ls -la " + sourceDir);
        Œπ(sourceLsResult.c === 0){
            report += "```\n" + sourceLsResult.o + "```\n\n";
        }
        
        // Get file count and size
        ŒæsourceCountResult = !("find " + sourceDir + " -type f | wc -l");
        ŒæsourceSizeResult = !("du -sh " + sourceDir);
        
        Œπ(sourceCountResult.c === 0 && sourceSizeResult.c === 0){
            report += "Total files: " + sourceCountResult.o.trim() + "\n";
            report += "Total size: " + sourceSizeResult.o.trim() + "\n\n";
        }
        
        // Backup directory report
        report += "## Backup Directory (" + backupDir + ")\n\n";
        ŒæbackupLsResult = !("ls -la " + backupDir);
        Œπ(backupLsResult.c === 0){
            report += "```\n" + backupLsResult.o + "```\n\n";
        }
        
        // Sync directory report
        report += "## Sync Directory (" + syncDir + ")\n\n";
        ŒæsyncLsResult = !("ls -la " + syncDir);
        Œπ(syncLsResult.c === 0){
            report += "```\n" + syncLsResult.o + "```\n\n";
        }
        
        // File differences
        report += "## File Differences\n\n";
        
        // Compare source and backup
        ŒædiffSourceBackupResult = !("diff -q " + sourceDir + " " + backupDir);
        report += "### Source vs Backup\n\n";
        report += "```\n" + (diffSourceBackupResult.c === 0 ? "No differences" : diffSourceBackupResult.o) + "```\n\n";
        
        // Compare source and sync
        ŒædiffSourceSyncResult = !("diff -q " + sourceDir + " " + syncDir);
        report += "### Source vs Sync\n\n";
        report += "```\n" + (diffSourceSyncResult.c === 0 ? "No differences" : diffSourceSyncResult.o) + "```\n\n";
        
        // Save report
        ‚úç("file_system_report.md", report);
        ‚åΩ("Report saved to file_system_report.md");
    }
}
