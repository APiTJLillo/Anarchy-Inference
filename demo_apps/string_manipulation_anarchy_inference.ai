Œªsm{
    // String manipulation example in Anarchy Inference
    // This demonstrates various string operations and transformations
    
    ∆ímain(){
        // Sample text for manipulation
        œÉtext = "The quick brown fox jumps over the lazy dog";
        ‚åΩ("Original text: " + text);
        
        √∑{
            // String length
            Œπlength = text.length;
            ‚åΩ("Length: " + üî§(length));
            
            // Uppercase and lowercase
            œÉupper = text.toUpperCase();
            œÉlower = text.toLowerCase();
            ‚åΩ("Uppercase: " + upper);
            ‚åΩ("Lowercase: " + lower);
            
            // Substring extraction
            œÉsub1 = text.substring(4, 9);  // "quick"
            œÉsub2 = text.substring(16, 19); // "fox"
            ‚åΩ("Substring 1: " + sub1);
            ‚åΩ("Substring 2: " + sub2);
            
            // String replacement
            œÉreplaced = text.replace("lazy", "energetic");
            ‚åΩ("Replaced: " + replaced);
            
            // String splitting
            Œæwords = text.split(" ");
            ‚åΩ("Word count: " + üî§(words.length));
            ‚åΩ("Words: " + ‚éã.stringify(words));
            
            // String joining
            œÉjoined = words.join("-");
            ‚åΩ("Joined with hyphens: " + joined);
            
            // String searching
            ŒπfoxIndex = text.indexOf("fox");
            ŒπdogIndex = text.indexOf("dog");
            ‚åΩ("'fox' found at index: " + üî§(foxIndex));
            ‚åΩ("'dog' found at index: " + üî§(dogIndex));
            
            // Check if string contains substring
            ŒπhasFox = text.includes("fox");
            ŒπhasZebra = text.includes("zebra");
            ‚åΩ("Contains 'fox': " + (hasFox ? "Yes" : "No"));
            ‚åΩ("Contains 'zebra': " + (hasZebra ? "Yes" : "No"));
            
            // String trimming
            œÉpaddedText = "   " + text + "   ";
            œÉtrimmed = paddedText.trim();
            ‚åΩ("Padded text: '" + paddedText + "'");
            ‚åΩ("Trimmed text: '" + trimmed + "'");
            
            // String reversal
            ∆íreverseString(œÉstr){
                ‚üº(str.split("").reverse().join(""));
            }
            
            œÉreversed = reverseString(text);
            ‚åΩ("Reversed: " + reversed);
            
            // Count occurrences of a character
            ∆ícountChar(œÉstr, œÉchar){
                Œπcount = 0;
                ‚àÄ(str.split(""), œÜ(c){
                    Œπ(c === char){
                        count++;
                    }
                });
                ‚üº(count);
            }
            
            ŒπeCount = countChar(text, "e");
            ‚åΩ("Occurrences of 'e': " + üî§(eCount));
            
            // Generate statistics
            Œæstats = {
                "text": text,
                "length": length,
                "wordCount": words.length,
                "charFrequency": {}
            };
            
            // Count frequency of each character
            ‚àÄ(text.split(""), œÜ(c){
                Œπ(c !== " "){
                    Œπ(!stats.charFrequency[c]){
                        stats.charFrequency[c] = 0;
                    }
                    stats.charFrequency[c]++;
                }
            });
            
            // Save statistics to file
            œÉjsonStats = ‚éã.stringify(stats, null, 2);
            ‚úç("string_stats.json", jsonStats);
            ‚åΩ("String statistics saved to string_stats.json");
            
            ‚üº(‚ä§);
        }{
            ‚åΩ("Error during string manipulation: " + ‚ö†.message);
            ‚üº(‚ä•);
        }
    }
}
