λui_demo{
    // UI Application Demonstration in Anarchy Inference
    // This application creates a simple user interface for data visualization
    
    ƒmain(){
        // Configuration
        σtitle = "Anarchy Inference UI Demo";
        ιwidth = 800;
        ιheight = 600;
        
        ⌽("Starting " + title);
        
        ÷{
            // Create main window
            ξwindow = □(title, width, height);
            
            // Load data for visualization
            ξdata = loadData("data/sample_data.csv");
            
            ι(!data || data.length === 0){
                ⌽("Error: No data loaded");
                ⟼(⊥);
            }
            
            ⌽("Loaded " + 🔤(data.length) + " records");
            
            // Create UI components
            createUI(window, data);
            
            // Start the application
            window.show();
            
            ⟼(⊤);
        }{
            ⌽("Error in UI application: " + ⚠.message);
            ⟼(⊥);
        }
    }
    
    // Load data from CSV file
    ƒloadData(σfilePath){
        ÷{
            // Read file content
            σcontent = 📖(filePath);
            
            // Parse CSV data
            ξlines = content.split("\n");
            ξheader = lines[0].split(",");
            ξdata = ∅;
            
            // Process each line
            ∀(lines.slice(1), φ(line){
                ι(line.trim().length > 0){
                    ξfields = line.split(",");
                    ξrow = ∅;
                    
                    ∀(header, φ(col, i){
                        row[col] = fields[i];
                    });
                    
                    ＋(data, row);
                }
            });
            
            ⟼(data);
        }{
            ⌽("Error loading data: " + ⚠.message);
            ⟼(∅);
        }
    }
    
    // Create the user interface
    ƒcreateUI(ξwindow, ξdata){
        // Create header section
        ξheaderPanel = window.createPanel("header", 0, 0, width, 80);
        headerPanel.setBackground("#2c3e50");
        
        ξtitleLabel = headerPanel.createLabel(title, 20, 20, width - 40, 40);
        titleLabel.setFontSize(24);
        titleLabel.setColor("#ffffff");
        
        // Create sidebar for controls
        ξsidebar = window.createPanel("sidebar", 0, 80, 200, height - 80);
        sidebar.setBackground("#ecf0f1");
        
        // Create visualization area
        ξvisPanel = window.createPanel("visualization", 200, 80, width - 200, height - 80);
        visPanel.setBackground("#ffffff");
        
        // Add controls to sidebar
        ξcategoryLabel = sidebar.createLabel("Select Category:", 10, 20, 180, 30);
        
        // Extract categories from data
        ξcategories = ∅;
        ∀(data, φ(row){
            ι(!categories.includes(row.category)){
                ＋(categories, row.category);
            }
        });
        
        // Create dropdown for categories
        ξcategoryDropdown = sidebar.createDropdown(10, 50, 180, 30);
        ∀(categories, φ(category){
            categoryDropdown.addItem(category);
        });
        
        // Create chart type selector
        ξchartLabel = sidebar.createLabel("Chart Type:", 10, 100, 180, 30);
        
        ξbarChartButton = sidebar.createRadioButton("Bar Chart", 10, 130, 180, 30, ⊤);
        ξpieChartButton = sidebar.createRadioButton("Pie Chart", 10, 160, 180, 30, ⊥);
        ξlineChartButton = sidebar.createRadioButton("Line Chart", 10, 190, 180, 30, ⊥);
        
        // Create update button
        ξupdateButton = sidebar.createButton("Update Chart", 10, 240, 180, 40);
        
        // Create export button
        ξexportButton = sidebar.createButton("Export Data", 10, 300, 180, 40);
        
        // Initial chart rendering
        renderBarChart(visPanel, data, categories[0]);
        
        // Set up event handlers
        updateButton.onClick(φ(){
            σselectedCategory = categoryDropdown.getSelectedValue();
            
            ι(barChartButton.isSelected()){
                renderBarChart(visPanel, data, selectedCategory);
            }ε ι(pieChartButton.isSelected()){
                renderPieChart(visPanel, data, selectedCategory);
            }ε ι(lineChartButton.isSelected()){
                renderLineChart(visPanel, data, selectedCategory);
            }
        });
        
        exportButton.onClick(φ(){
            exportData(data, categoryDropdown.getSelectedValue());
        });
    }
    
    // Render bar chart
    ƒrenderBarChart(ξpanel, ξdata, σcategory){
        panel.clear();
        
        // Filter data by selected category
        ξfilteredData = data.filter(φ(row){ ⟼(row.category === category); });
        
        // Sort by value
        filteredData.sort(φ(a, b){ ⟼(🔢(b.value) - 🔢(a.value)); });
        
        // Calculate chart dimensions
        ιchartWidth = panel.getWidth() - 80;
        ιchartHeight = panel.getHeight() - 100;
        ιbarWidth = Math.min(50, chartWidth / filteredData.length - 10);
        
        // Find maximum value for scaling
        ιmaxValue = 0;
        ∀(filteredData, φ(row){
            ιvalue = 🔢(row.value);
            ι(value > maxValue){
                maxValue = value;
            }
        });
        
        // Draw chart title
        ξtitleLabel = panel.createLabel("Bar Chart - Category: " + category, 40, 20, chartWidth, 30);
        titleLabel.setFontSize(18);
        
        // Draw axes
        panel.drawLine(40, 50, 40, 50 + chartHeight, "#000000", 2);
        panel.drawLine(40, 50 + chartHeight, 40 + chartWidth, 50 + chartHeight, "#000000", 2);
        
        // Draw bars
        ∀(filteredData, φ(row, i){
            ιvalue = 🔢(row.value);
            ιbarHeight = (value / maxValue) * chartHeight;
            ιx = 60 + i * (barWidth + 10);
            ιy = 50 + chartHeight - barHeight;
            
            // Draw bar
            panel.drawRect(x, y, barWidth, barHeight, "#3498db", ⊤);
            
            // Draw label
            panel.drawText(row.name, x, 50 + chartHeight + 15, "#000000", 10);
            
            // Draw value
            panel.drawText(🔤(value), x, y - 15, "#000000", 12);
        });
    }
    
    // Render pie chart
    ƒrenderPieChart(ξpanel, ξdata, σcategory){
        panel.clear();
        
        // Filter data by selected category
        ξfilteredData = data.filter(φ(row){ ⟼(row.category === category); });
        
        // Calculate total value
        ιtotal = 0;
        ∀(filteredData, φ(row){
            total += 🔢(row.value);
        });
        
        // Calculate chart dimensions
        ιcenterX = panel.getWidth() / 2;
        ιcenterY = panel.getHeight() / 2;
        ιradius = Math.min(centerX, centerY) - 80;
        
        // Draw chart title
        ξtitleLabel = panel.createLabel("Pie Chart - Category: " + category, 40, 20, panel.getWidth() - 80, 30);
        titleLabel.setFontSize(18);
        
        // Draw pie slices
        ιstartAngle = 0;
        ξcolors = ["#3498db", "#e74c3c", "#2ecc71", "#f39c12", "#9b59b6", "#1abc9c", "#d35400"];
        
        ∀(filteredData, φ(row, i){
            ιvalue = 🔢(row.value);
            ιsliceAngle = (value / total) * 2 * Math.PI;
            ιendAngle = startAngle + sliceAngle;
            
            // Draw slice
            panel.drawArc(centerX, centerY, radius, startAngle, endAngle, colors[i % colors.length], ⊤);
            
            // Calculate label position
            ιlabelAngle = startAngle + sliceAngle / 2;
            ιlabelX = centerX + Math.cos(labelAngle) * (radius * 0.7);
            ιlabelY = centerY + Math.sin(labelAngle) * (radius * 0.7);
            
            // Draw label
            panel.drawText(row.name, labelX, labelY, "#ffffff", 12);
            
            // Update start angle for next slice
            startAngle = endAngle;
        });
        
        // Draw legend
        ιlegendX = 40;
        ιlegendY = panel.getHeight() - 100;
        
        ∀(filteredData, φ(row, i){
            ιvalue = 🔢(row.value);
            ιpercentage = (value / total * 100).toFixed(1);
            
            // Draw color box
            panel.drawRect(legendX, legendY + i * 25, 15, 15, colors[i % colors.length], ⊤);
            
            // Draw label
            panel.drawText(row.name + ": " + 🔤(value) + " (" + percentage + "%)", 
                          legendX + 25, legendY + i * 25 + 12, "#000000", 12);
        });
    }
    
    // Render line chart
    ƒrenderLineChart(ξpanel, ξdata, σcategory){
        panel.clear();
        
        // Filter data by selected category
        ξfilteredData = data.filter(φ(row){ ⟼(row.category === category); });
        
        // Sort by ID for line chart
        filteredData.sort(φ(a, b){ ⟼(🔢(a.id) - 🔢(b.id)); });
        
        // Calculate chart dimensions
        ιchartWidth = panel.getWidth() - 80;
        ιchartHeight = panel.getHeight() - 100;
        
        // Find maximum value for scaling
        ιmaxValue = 0;
        ∀(filteredData, φ(row){
            ιvalue = 🔢(row.value);
            ι(value > maxValue){
                maxValue = value;
            }
        });
        
        // Draw chart title
        ξtitleLabel = panel.createLabel("Line Chart - Category: " + category, 40, 20, chartWidth, 30);
        titleLabel.setFontSize(18);
        
        // Draw axes
        panel.drawLine(40, 50, 40, 50 + chartHeight, "#000000", 2);
        panel.drawLine(40, 50 + chartHeight, 40 + chartWidth, 50 + chartHeight, "#000000", 2);
        
        // Calculate point spacing
        ιpointSpacing = chartWidth / (filteredData.length - 1);
        
        // Draw points and lines
        ξpoints = ∅;
        
        ∀(filteredData, φ(row, i){
            ιvalue = 🔢(row.value);
            ιx = 40 + i * pointSpacing;
            ιy = 50 + chartHeight - (value / maxValue) * chartHeight;
            
            // Store point
            ＋(points, {x: x, y: y});
            
            // Draw point
            panel.drawCircle(x, y, 5, "#e74c3c", ⊤);
            
            // Draw label
            panel.drawText(row.name, x, 50 + chartHeight + 15, "#000000", 10);
            
            // Draw value
            panel.drawText(🔤(value), x, y - 15, "#000000", 12);
            
            // Draw line to previous point
            ι(i > 0){
                panel.drawLine(points[i-1].x, points[i-1].y, x, y, "#3498db", 2);
            }
        });
    }
    
    // Export data to CSV file
    ƒexportData(ξdata, σcategory){
        // Filter data by selected category
        ξfilteredData = data.filter(φ(row){ ⟼(row.category === category); });
        
        // Create CSV content
        σcsvContent = "id,name,value,category\n";
        
        ∀(filteredData, φ(row){
            csvContent += row.id + "," + row.name + "," + row.value + "," + row.category + "\n";
        });
        
        // Save to file
        σfileName = "export_" + category + "_" + Date.now() + ".csv";
        ✍(fileName, csvContent);
        
        ⌽("Data exported to " + fileName);
    }
}
