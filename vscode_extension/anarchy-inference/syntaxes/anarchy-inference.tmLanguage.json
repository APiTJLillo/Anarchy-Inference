{
  "scopeName": "source.anarchy-inference",
  "fileTypes": ["ai"],
  "name": "Anarchy Inference",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#function-definition"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#conditionals"
    },
    {
      "include": "#loops"
    },
    {
      "include": "#brackets"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "match": "#.*$",
          "name": "comment.line.number-sign.anarchy-inference"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.anarchy-inference",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.anarchy-inference",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.anarchy-inference",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.anarchy-inference",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "function-definition": {
      "patterns": [
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(([^)]*)\\)\\s*=",
          "captures": {
            "1": {
              "name": "entity.name.function.anarchy-inference"
            },
            "2": {
              "name": "variable.parameter.anarchy-inference"
            }
          }
        }
      ]
    },
    "function-call": {
      "patterns": [
        {
          "match": "\\b(print|len|upper|lower|split|join|replace|read|write|append|get|parse|filter|map|reduce)\\s*\\(",
          "captures": {
            "1": {
              "name": "support.function.anarchy-inference"
            }
          }
        },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.anarchy-inference"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(true|false|null)\\b",
          "name": "constant.language.anarchy-inference"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*=(?!=)",
          "captures": {
            "1": {
              "name": "variable.other.anarchy-inference"
            }
          }
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b(\\d+(\\.\\d+)?)\\b",
          "name": "constant.numeric.anarchy-inference"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "=|\\+|-|\\*|/|%|\\^|==|!=|>|<|>=|<=|\\+=|-=|\\*=|/=|%=|\\^=|\\+\\+|--|&&|\\|\\||!",
          "name": "keyword.operator.anarchy-inference"
        }
      ]
    },
    "conditionals": {
      "patterns": [
        {
          "match": "\\?\\(",
          "name": "keyword.control.conditional.anarchy-inference"
        }
      ]
    },
    "loops": {
      "patterns": [
        {
          "match": "@\\(",
          "name": "keyword.control.loop.anarchy-inference"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "match": "{|}|\\(|\\)|\\[|\\]",
          "name": "punctuation.section.anarchy-inference"
        }
      ]
    }
  }
}
