// Core Language Feature Benchmarks for Anarchy Inference

// Variable operations benchmark
ι benchmark_variables() ⟼ {
    ι count = 0;
    for (ι i = 0; i < 1000000; i = i + 1) {
        count = count + 1;
    }
    ⟼ count;
}

// Arithmetic operations benchmark
ι benchmark_arithmetic() ⟼ {
    ι sum = 0;
    ι product = 1;
    for (ι i = 1; i <= 10000; i = i + 1) {
        sum = sum + i;
        product = product * (i % 10 + 1);  // Modulo to prevent overflow
    }
    ⟼ sum + product;
}

// String operations benchmark
ι benchmark_strings() ⟼ {
    ι result = "";
    for (ι i = 0; i < 10000; i = i + 1) {
        result = result + "a";
    }
    ⟼ result.length;
}

// Function calls benchmark
ι fibonacci(n) ⟼ {
    if (n <= 1) {
        ⟼ n;
    }
    ⟼ fibonacci(n - 1) + fibonacci(n - 2);
}

ι benchmark_functions() ⟼ {
    ⟼ fibonacci(20);
}

// Control flow benchmark
ι benchmark_control_flow() ⟼ {
    ι count = 0;
    for (ι i = 0; i < 10000; i = i + 1) {
        if (i % 2 == 0) {
            count = count + 1;
        } else if (i % 3 == 0) {
            count = count + 2;
        } else {
            count = count + 3;
        }
    }
    ⟼ count;
}

// Collection operations benchmark
ι benchmark_collections() ⟼ {
    ι list = [];
    // Add elements
    for (ι i = 0; i < 10000; i = i + 1) {
        list.push(i);
    }
    
    // Filter elements
    ι filtered = [];
    for (ι i = 0; i < list.length; i = i + 1) {
        if (list[i] % 2 == 0) {
            filtered.push(list[i]);
        }
    }
    
    // Map elements
    ι mapped = [];
    for (ι i = 0; i < filtered.length; i = i + 1) {
        mapped.push(filtered[i] * 2);
    }
    
    // Reduce elements
    ι sum = 0;
    for (ι i = 0; i < mapped.length; i = i + 1) {
        sum = sum + mapped[i];
    }
    
    ⟼ sum;
}

// Run all benchmarks
ι run_core_benchmarks() ⟼ {
    ⌽ "Running Core Language Feature Benchmarks...";
    
    ⌽ "Variables Benchmark: " + benchmark_variables();
    ⌽ "Arithmetic Benchmark: " + benchmark_arithmetic();
    ⌽ "Strings Benchmark: " + benchmark_strings();
    ⌽ "Functions Benchmark: " + benchmark_functions();
    ⌽ "Control Flow Benchmark: " + benchmark_control_flow();
    ⌽ "Collections Benchmark: " + benchmark_collections();
    
    ⌽ "Core Language Feature Benchmarks Complete!";
}
